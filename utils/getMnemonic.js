const fs = require('fs')
const path = require('path')

const openaiApiKey = process.env.OPENAI_API_KEY
const cacheFilePath = path.join(__dirname, 'mnemonicsCache.json')

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à
let cache = {}
if (fs.existsSync(cacheFilePath)) {
  try {
    cache = JSON.parse(fs.readFileSync(cacheFilePath, 'utf-8'))
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫—ç—à:', err)
  }
}

async function getMnemonic(word, rightWords = []) {
  if (!openaiApiKey) {
    console.error('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
    return 'Mnemonic not available.'
  }

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  const cacheKey = `${word}::${rightWords.join(',')}`

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
  if (cache[cacheKey]) {
    console.log(`‚ôªÔ∏è –í–æ–∑–≤—Ä–∞—â–∞—é –∫—ç—à –¥–ª—è —Å–ª–æ–≤–∞: "${word}" —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: [${rightWords.join(', ')}]`)
    return cache[cacheKey]
  }

  console.log(`üîç –ó–∞–ø—Ä–æ—Å –º–Ω–µ–º–æ–Ω–∏–∫–∏ –¥–ª—è —Å–ª–æ–≤–∞: "${word}" —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: [${rightWords.join(', ')}]`)

  // –§–æ—Ä–º–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const clarification =
    rightWords.length > 0 ? `–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö —Å–ª–æ–≤–∞ "${word}": ${rightWords.join(', ')}.` : ''

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiApiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        max_tokens: 700,
        messages: [
          {
            role: 'system',
            content: `
–¢—ã —Å–æ–∑–¥–∞–µ—à—å –º–Ω–µ–º–æ–Ω–∏–∫—É –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞. –°–¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–µ–µ:
1. –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, —Ä—É—Å—Å–∫–æ–µ –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
2. –ü–µ—Ä–µ–≤–æ–¥
3. –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è ‚Äî —è—Ä–∫–∞—è, —Å–º–µ—à–Ω–∞—è, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∞—è—Å—è
4. –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–∑–∞
5. 2‚Äì3 –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º
6. –¢—Ä–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–æ—à–µ–¥—à–µ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ)
7. –ú–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞: –≤—ã–±–æ—Ä, –ø—Ä–æ–ø—É—Å–∫, –ø—Ä–∞–≤–¥–∞/–ª–æ–∂—å + –æ—Ç–≤–µ—Ç—ã

–ë—É–¥—å –ª—ë–≥–∫–∏–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–µ –∞–∫–∞–¥–µ–º–∏—á–Ω—ã–º. –ü–æ–º–æ–≥–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞–≤—Å–µ–≥–¥–∞!
          `.trim(),
          },
          {
            role: 'user',
            content: `${word}\n\n${clarification}`.trim(),
          },
        ],
      }),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç OpenAI API (${response.status}): ${errorText}`)
      return 'Mnemonic not available.'
    }

    const data = await response.json()
    const result = data?.choices?.[0]?.message?.content

    if (!result) {
      console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI.')
      return 'Mnemonic not available.'
    }

    console.log('‚úÖ –ú–Ω–µ–º–æ–Ω–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –°–æ—Ö—Ä–∞–Ω—è—é –≤ –∫—ç—à.')

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    cache[cacheKey] = result
    console.log('cache.length', cache.length)
    fs.writeFileSync(cacheFilePath, JSON.stringify(cache, null, 2), 'utf-8')

    return result
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API:', err)
    return 'Mnemonic not available.'
  }
}

module.exports = getMnemonic
