 const openaiApiKey = process.env.OPENAI_API_KEY;

async function getMnemonic(word) {
  if (!openaiApiKey) {
    console.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
    return "Mnemonic not available.";
  }

  console.log(`üîç –ó–∞–ø—Ä–æ—Å –º–Ω–µ–º–æ–Ω–∏–∫–∏ –¥–ª—è —Å–ª–æ–≤–∞: "${word}"`);

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${openaiApiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–Ω–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∏. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ, –¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–µ–µ:\n
1. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n
2. –î–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n
3. –ü—Ä–∏–¥—É–º–∞–π —è—Ä–∫—É—é –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—É—é, –Ω–µ–æ–±—ã—á–Ω—É—é –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é.\n
4. –û–±—ä—è—Å–Ω–∏ —ç—Ç—É –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã –æ–±—ä—è—Å–Ω—è–ª —É—á–µ–Ω–∏–∫—É.\n
5. –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\n
6. –ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.\n
–ï—Å–ª–∏ —Å–ª–æ–≤–æ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏–ª–∏ —Å–ª–æ–∂–Ω–æ–µ, —É–ø—Ä–æ—â–∞–π –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∞–Ω–∞–ª–æ–≥–∏–π –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º.`
          },
          {
            role: "user",
            content: word
          }
        ]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç OpenAI API (${response.status}): ${errorText}`);
      return "Mnemonic not available.";
    }

    const data = await response.json();
    const result = data?.choices?.[0]?.message?.content;

    if (!result) {
      console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI.");
      return "Mnemonic not available.";
    }

    console.log("‚úÖ –ú–Ω–µ–º–æ–Ω–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
    return result;

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API:", err);
    return "Mnemonic not available.";
  }
}

module.exports = getMnemonic;