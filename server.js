const dotenv = require('dotenv')
dotenv.config()
const TelegramBot = require('node-telegram-bot-api')
const { clockStart, clockEnd } = require('./constants/intervals.js')
// const getAllWordsFromFiles = require("./utils/getAllWordsFromFiles.js")
// const { dictionaryText } = getAllWordsFromFiles()
const { sec, ms, min, interval } = require('./constants/intervals.js')
const { textMessageHtml } = require('./constants/texts.js')
const sendingWordMessage = require('./utils/prepareMessage.js')
const dictionaryTextToFile = require('./utils/dictionaryTextToFile.js')
const { give_me_keyboard, intervalSettingsKeyboard, startMenu } = require('./constants/menus.js')
const getWordsFromGoogleDocs = require('./utils/getWordsFromGoogleDocs.js')
const formatDate = require('./utils/formatDate.js')
const { setUserInterval, getUserInterval, getUserIntervalMs, loadUserIntervals } = require('./utils/userIntervals.js')
const { createOrUpdateUserTimer, stopUserTimer, getUserTimerInfo, stopAllTimers } = require('./utils/userTimers.js')
const { addLearnedWord, isWordLearned, loadLearnedWords } = require('./utils/learnedWords.js')
const { getUserIndex, setUserIndex } = require('./utils/userProgress.js')
// const crypto = require('crypto')

var currentIndex = 0
// const fs = require("fs")
// const path = require("path")

// const pidFile = path.join(__dirname, "bot.pid")

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ PID-—Ñ–∞–π–ª
// if (fs.existsSync(pidFile)) {
//   const pid = parseInt(fs.readFileSync(pidFile, "utf8"), 10)

//   try {
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
//     process.kill(pid, 0)
//     console.log(`Bot is already running with PID ${pid}. Exiting...`)
//     process.exit(1) // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
//   } catch (err) {
//     // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
//     console.log(
//       "Stale PID file found. Starting new bot instance...",
//       new Date().toLocaleTimeString("en-GB")
//     )
//     fs.unlinkSync(pidFile) // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π PID-—Ñ–∞–π–ª
//   }
// }

// // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π PID –≤ —Ñ–∞–π–ª
// fs.writeFileSync(pidFile, process.pid.toString())

// // –£–¥–∞–ª—è–µ–º PID-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
// process.on("exit", () => fs.unlinkSync(pidFile))
// process.on("SIGINT", () => {
//   fs.unlinkSync(pidFile)
//   process.exit(0)
// })

// =================================

// const token =
//     process.env.NODE_ENV === 'prod'
//         ? process.env.TELEGRAM_BOT_TOKEN
//         : process.env.TELEGRAM_BOT_TOKEN_testing

const token = process.env.TELEGRAM_BOT_TOKEN
// console.log('token :>> ', token)
console.log('process.env.NODE_ENV', process.env.NODE_ENV)
const bot = new TelegramBot(token, {
  polling: true,
  // contentTypeFix: false,
})
//caching dictionaries======
// dictionaryTextToFile()
// logSessions()

var optionsMessage = {
  // keyboard=====
  // reply_markup: JSON.stringify(start_keyboard),
  parse_mode: 'HTML',
  //disable because we don't want show description links
  disable_web_page_preview: true,
}

const CHAT_ID_ADMIN = process.env.CHAT_ID_ADMIN
bot.sendMessage(CHAT_ID_ADMIN, textMessageHtml, optionsMessage)
var dictionary

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ polling
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;
const RECONNECT_DELAY = 5000; // 5 —Å–µ–∫—É–Ω–¥

bot.on('polling_error', async (error) => {
  console.error('Polling error:', error.code, error.message);
  
  if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
    reconnectAttempts++;
    console.log(`Attempting to reconnect (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})...`);
    
    try {
      await bot.stopPolling();
      await new Promise(resolve => setTimeout(resolve, RECONNECT_DELAY));
      await bot.startPolling();
      console.log('Successfully reconnected to Telegram');
      reconnectAttempts = 0;
    } catch (reconnectError) {
      console.error('Failed to reconnect:', reconnectError);
    }
  } else {
    console.error('Max reconnection attempts reached. Please check your internet connection and Telegram API status.');
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if (CHAT_ID_ADMIN) {
      bot.sendMessage(CHAT_ID_ADMIN, '‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.');
    }
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception thrown:', err);
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  if (CHAT_ID_ADMIN) {
    bot.sendMessage(CHAT_ID_ADMIN, `‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã...');
  stopAllTimers();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã...');
  stopAllTimers();
  process.exit(0);
});

// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Å–ª–æ–≤–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userCurrentOriginal = {}
const userCurrentIndex = {}

// callback_query –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ ==========================================
bot.on('callback_query', async (query) => {
  const chatId = query.from.id
  // console.log('query ---------------:>> ', query)

  if (query.data === 'give_me') {
    const nextIdx = getNextUnlearnedIndex(dictionary, chatId, getUserIndex(chatId) + 1)
    setUserIndex(chatId, nextIdx)
    const result = await sendingWordMessage(dictionary, nextIdx, bot, chatId)
    userCurrentOriginal[chatId] = result.leftWords
  } else if (query.data === 'interval_settings') {
    const userInterval = getUserInterval(chatId)
    const intervalText = userInterval ? `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${userInterval} –º–∏–Ω—É—Ç` : '–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    await bot.sendMessage(chatId, intervalText, {
      reply_markup: JSON.stringify(intervalSettingsKeyboard)
    })
    await bot.answerCallbackQuery(query.id)
    return
  } else if (query.data.startsWith('interval_')) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    const intervalValue = parseInt(query.data.replace('interval_', ''))
    
    if (intervalValue) {
      setUserInterval(chatId, intervalValue)
      createOrUpdateUserTimer(chatId, bot, dictionary, { currentIndex }, async (chatId, bot, dictionary, currentIndexRef) => {
        const timestamp = Date.now()
        const formattedDate = formatDate(timestamp)
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId} –≤ ${formattedDate}`)
        try {
          const result = await sendingWordMessage(dictionary, currentIndexRef.currentIndex, bot, chatId)
          userCurrentOriginal[chatId] = result.leftWords
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –≤ sendingWordMessage:', err)
        }
        if (currentIndexRef.currentIndex == dictionary.length - 1) {
          currentIndexRef.currentIndex = 0
        } else {
          currentIndexRef.currentIndex++
        }
      })
      await bot.answerCallbackQuery(query.id, {
        text: `–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${intervalValue} –º–∏–Ω—É—Ç`
      })
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const userInterval = getUserInterval(chatId)
      const timerInfo = getUserTimerInfo(chatId)
      const learnedWords = loadLearnedWords(chatId)
      const userIndex = getUserIndex(chatId)
      let message = 'üõ†Ô∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n'
      message += `‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>${userInterval ? userInterval + ' –º–∏–Ω' : min + ' –º–∏–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}</b>\n`
      message += `‚è≥ –¢–∞–π–º–µ—Ä: <b>${timerInfo.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}</b>\n`
      message += `üìö –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: <b>${learnedWords.length}</b>\n`
      message += `üî¢ –ò–Ω–¥–µ–∫—Å (user_progress): <b>${userIndex}</b>\n\n`
      if (learnedWords.length > 0) {
        message += '<b>–°–ø–∏—Å–æ–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:</b>\n'
        learnedWords.forEach(word => {
          const idx = dictionary.findIndex(line => {
            const original = line.split(/[-‚Äî‚Äì‚àí]/)[0].trim()
            return original === word
          })
          message += `‚Ä¢ ${word} <i>(–∏–Ω–¥–µ–∫—Å: ${idx !== -1 ? idx : '–Ω–µ –Ω–∞–π–¥–µ–Ω'})</i>\n`
        })
      } else {
        message += '–ù–µ—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.'
      }
      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' })
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
      try {
        await bot.editMessageReplyMarkup(
          give_me_keyboard,
          {
            chat_id: chatId,
            message_id: query.message.message_id
          }
        )
      } catch (err) {
        if (
          err.response &&
          err.response.body &&
          err.response.body.description &&
          err.response.body.description.includes('message is not modified')
        ) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ editMessageReplyMarkup:', err)
        }
      }
    }
  } else if (query.data === 'back_to_main') {
    await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
      reply_markup: startMenu
    })
    await bot.answerCallbackQuery(query.id)
    return
  } else if (query.data === 'mark_learned') {
    const original = userCurrentOriginal[chatId]
    if (original) {
      addLearnedWord(chatId, original)
      console.log(`[LEARNED] chatId: ${chatId}, original: '${original}', index: ${getUserIndex(chatId)}`)
      await bot.answerCallbackQuery(query.id, { text: '–°–ª–æ–≤–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω–æ–µ!' })
    } else {
      console.log(`[LEARNED][SKIP] chatId: ${chatId}, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª`)
      await bot.answerCallbackQuery(query.id, { text: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–ª–æ–≤–∞!' })
    }
    // –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ –Ω–µ–≤—ã—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    setUserIndex(chatId, getNextUnlearnedIndex(dictionary, chatId, (getUserIndex(chatId) || 0) + 1))
    const result = await sendingWordMessage(dictionary, getUserIndex(chatId), bot, chatId)
    userCurrentOriginal[chatId] = result.leftWords
    return
  }
})

// bot.on('polling_error', (error) => {
//   console.error('Polling error:', error.code, error.message)
//   // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
// })

// process.on('unhandledRejection', (reason, promise) => {
//   console.error('Unhandled Rejection at:', promise, 'reason:', reason)
//   // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏–ª–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
// })

// process.on('uncaughtException', (err) => {
//   console.error('Uncaught Exception thrown:', err)
//   // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
// })

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
bot.onText(/\/interval/, async (msg) => {
  const chatId = msg.chat.id
  const userInterval = getUserInterval(chatId)
  const timerInfo = getUserTimerInfo(chatId)
  
  let message = 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ:\n\n'
  
  if (userInterval) {
    message += `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${userInterval} –º–∏–Ω—É—Ç\n`
    message += `üîÑ –¢–∞–π–º–µ—Ä: ${timerInfo.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`
    message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è'
  } else {
    message += `‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`
    message += `üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${min} –º–∏–Ω—É—Ç\n\n`
    message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
  }
  
  await bot.sendMessage(chatId, message)
})

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏ /start
bot.onText(/\/start/, async (msg) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start')
  const dictionaryText = await getWordsFromGoogleDocs()
  
  if (!dictionaryText) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑ Google Docs')
    const chatId = msg.chat.id
    await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: startMenu
    })
    return
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
  dictionary = dictionaryText.split(/\r?\n/)
    .map(line => line.trim())
    .filter(line => line && !line.startsWith('üáÆüá±') && !line.startsWith('___')) // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞—Ä—è
  if (!Array.isArray(dictionary) || dictionary.length === 0) {
    console.error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:', {
      isArray: Array.isArray(dictionary),
      length: dictionary?.length,
      firstFewLines: dictionary?.slice(0, 3)
    })
    const chatId = msg.chat.id
    await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: startMenu
    })
    return
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–ª–æ–≤–∞—Ä—è
  const invalidLines = dictionary.filter(line => {
    const hasValidSeparator = ['-', '‚Äî', '‚Äì', '‚Äî', '‚àí'].some(sep => line.includes(sep))
    return !hasValidSeparator
  })
  
  if (invalidLines.length > 0) {
    console.error('–ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º:', {
      count: invalidLines.length,
      examples: invalidLines.slice(0, 5)
    })
  }

  console.log(`–°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ${dictionary.length}`)
  
  const chatId = msg.chat.id
  var photoPath = __dirname + '/media/logo.jpg'

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userInterval = getUserInterval(chatId)
  const intervalText = userInterval ? `${userInterval} –º–∏–Ω—É—Ç` : `${min} –º–∏–Ω—É—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)`
  
  var optionsMessage2 = {
    caption: `Catch the first word, the rest will be in ${intervalText}`,
    reply_markup: JSON.stringify(give_me_keyboard),
    contentType: 'image/jpeg', // —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ
  }

  // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
  await bot.sendMessage(chatId, '–ú–µ–Ω—é:', { reply_markup: startMenu })

  try {
    await bot.sendPhoto(chatId, photoPath, optionsMessage2)
    setUserIndex(chatId, getNextUnlearnedIndex(dictionary, chatId, (getUserIndex(chatId) || 0)))
    const result = await sendingWordMessage(dictionary, getUserIndex(chatId), bot, chatId)
    userCurrentOriginal[chatId] = result.leftWords
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err)
    await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    return
  }

  if (getUserIndex(chatId) == dictionary.length - 1) {
    setUserIndex(chatId, 0)
  } else {
    setUserIndex(chatId, getUserIndex(chatId) + 1)
  }

  let previousDictionaryHash = null // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä–µ

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const hashDictionary = (dictionary) => {
    const hash = require('crypto').createHash('sha256')
    hash.update(dictionary.join(''))
    return hash.digest('hex')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ
  const checkForDictionaryUpdates = async () => {
    const newDictionaryText = await getWordsFromGoogleDocs()
    if (!newDictionaryText) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ Google Docs')
      return
    }
    
    const newDictionary = newDictionaryText.split(/\r?\n/).filter(Boolean)

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ –±–æ–ª—å—à–µ 10 –æ—Ç–ª–∏—á–∏–π
    const diffCount = getDictionaryDiffCount(dictionary, newDictionary)

    if (diffCount > 10) {
      dictionary = newDictionary
      console.log(`–°–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω! –†–∞–∑–ª–∏—á–∏–π: ${diffCount}`)
      setUserIndex(chatId, 0)
    } else {
      console.log(`–°–ª–æ–≤–∞—Ä—å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω (—Ä–∞–∑–ª–∏—á–∏–π: ${diffCount})`)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞—Å—Å–∏–≤–∞–º–∏ —Å–ª–æ–≤
  function getDictionaryDiffCount(oldDict, newDict) {
    const oldSet = new Set(oldDict)
    const newSet = new Set(newDict)

    let diff = 0
    for (let word of newSet) {
      if (!oldSet.has(word)) diff++
    }
    for (let word of oldSet) {
      if (!newSet.has(word)) diff++
    }

    return diff
  }

  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä–µ
  // setInterval(checkForDictionaryUpdates, 1 * min); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ X –º–∏–Ω—É—Ç

  // setInterval(
  //   async () => {
  //     let isTimeForSending = false
  //
  //     let currentDate = new Date()
  //     let nowHours = currentDate.getHours()
  //     let nowMinutes = currentDate.getMinutes()
  //
  //     if (process.env.NODE_ENV === 'dev') {
  //       isTimeForSending = true
  //     } else if (nowHours < clockEnd && nowHours > clockStart) {
  //       isTimeForSending = true
  //     } else {
  //       console.log(`it isn't time for sending messages  -   ${nowHours}:${nowMinutes}`)
  //     }
  //
  //     //  await checkForDictionaryUpdates()
  //     if (isTimeForSending) {
  //       const timestamp = Date.now()
  //       const formattedDate = formatDate(timestamp)
  //
  //       await checkForDictionaryUpdates()
  //       console.log('______________')
  //       console.log('formattedDate', formattedDate)
  //
  //       setUserIndex(chatId, getNextUnlearnedIndex(dictionary, chatId, (getUserIndex(chatId) || 0) + 1))
  //       const result = await sendingWordMessage(dictionary, getUserIndex(chatId), bot, chatId)
  //       userCurrentOriginal[chatId] = result.leftWords
  //
  //       if (getUserIndex(chatId) == dictionary.length - 1) {
  //         setUserIndex(chatId, 0)
  //       } else {
  //         setUserIndex(chatId, getUserIndex(chatId) + 1)
  //       }
  //     }
  //   },
  //   interval,
  // )
})

// sending a list of words and adding them to the dictionary ===============

// bot.on('message', (msg) => {
//     console.log('msg.text===', msg.text)
//     const chatId = msg.chat.id

//     bot.sendMessage(
//         chatId,
//         'Hello, ' +
//             msg.chat.first_name +
//             '! Please choose what you want from menu',
//         start_inline_keyboard,
//     )

//     // else if (!dictionary.includes(msg.text) && msg.text !== '/start') {
//     //     dictionary = dictionary.concat(msg.text.split(/\r?\n/))
//     //     bot.sendMessage(
//     //         chatId,
//     //         `Successfully added "${msg.text}" to the dictionary.`,
//     //     )
//     // }
// })

//===============

console.log('server started with interval:', interval / ms / sec, 'min')

// {
//     process.env.NODE_ENV === 'dev' &&
//         sendingWordMessage(dictionary, bot, CHAT_ID_ADMIN) &&
//         setInterval(
//             () => sendingWordMessage(dictionary, bot, CHAT_ID_ADMIN),
//             interval,
//         )
// }

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
bot.on('message', async (msg) => {
  if (msg.text === '‚ÑπÔ∏è –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏') {
    const chatId = msg.chat.id
    const userInterval = getUserInterval(chatId)
    const timerInfo = getUserTimerInfo(chatId)
    const learnedWords = loadLearnedWords(chatId)
    const userIndex = getUserIndex(chatId)

    let message = 'üõ†Ô∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n'
    message += `‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>${userInterval ? userInterval + ' –º–∏–Ω' : min + ' –º–∏–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}</b>\n`
    message += `‚è≥ –¢–∞–π–º–µ—Ä: <b>${timerInfo.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}</b>\n`
    message += `üìö –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: <b>${learnedWords.length}</b>\n`
    message += `üî¢ –ò–Ω–¥–µ–∫—Å (user_progress): <b>${userIndex}</b>\n\n`

    if (learnedWords.length > 0) {
      message += '<b>–°–ø–∏—Å–æ–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:</b>\n'
      learnedWords.forEach(word => {
        // –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
        const idx = dictionary.findIndex(line => {
          const original = line.split(/[-‚Äî‚Äì‚àí]/)[0].trim()
          return original === word
        })
        message += `‚Ä¢ ${word} <i>(–∏–Ω–¥–µ–∫—Å: ${idx !== -1 ? idx : '–Ω–µ –Ω–∞–π–¥–µ–Ω'})</i>\n`
      })
    } else {
      message += '–ù–µ—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.'
    }

    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' })
    return
  }
  // –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"
  if (msg.text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞') {
    const chatId = msg.chat.id
    const userInterval = getUserInterval(chatId)
    const intervalText = userInterval ? `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${userInterval} –º–∏–Ω—É—Ç` : '–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    await bot.sendMessage(chatId, intervalText, {
      reply_markup: JSON.stringify(intervalSettingsKeyboard)
    })
    return
  }
})

function getNextUnlearnedIndex(dictionary, chatId, fromIndex = 0) {
  if (!dictionary || !dictionary.length) return 0
  let idx = fromIndex % dictionary.length
  let attempts = 0
  while (true) {
    const line = dictionary[idx]
    let original = line
    const symbolsArray = ['-', '‚Äî', '‚Äì', '‚Äî', '‚àí']
    symbolsArray.forEach((symbol) => {
      if (line && line.indexOf(symbol) !== -1) {
        original = line.split(symbol)[0].trim()
      }
    })
    if (!isWordLearned(chatId, original) || attempts >= dictionary.length) {
      break
    }
    idx = (idx + 1) % dictionary.length
    attempts++
  }
  return idx
}

// –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è –∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥
(async () => {
  const userIntervals = loadUserIntervals()
  if (userIntervals && typeof userIntervals === 'object') {
    Object.entries(userIntervals).forEach(([chatId, intervalMinutes]) => {
      if (intervalMinutes && dictionary && dictionary.length > 0) {
        createOrUpdateUserTimer(
          chatId,
          bot,
          dictionary,
          { currentIndex },
          async (chatId, bot, dictionary, currentIndexRef) => {
            const timestamp = Date.now()
            const formattedDate = formatDate(timestamp)
            console.log(`(auto) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId} –≤ ${formattedDate}`)
            try {
              const result = await sendingWordMessage(dictionary, currentIndexRef.currentIndex, bot, chatId)
              userCurrentOriginal[chatId] = result.leftWords
            } catch (err) {
              console.error('–û—à–∏–±–∫–∞ –≤ sendingWordMessage:', err)
            }
            if (currentIndexRef.currentIndex == dictionary.length - 1) {
              currentIndexRef.currentIndex = 0
            } else {
              currentIndexRef.currentIndex++
            }
          }
        )
      }
    })
  }
})()
